type SpecVersion @entity {
    id: ID! #specVersion
    blockHeight: BigInt!
}

type Event @entity {
    id: ID!
    blockHeight: BigInt! @index
    event: String! @index
    module: String! @index
}

type Extrinsic @entity {
    id: ID!
    blockHeight: BigInt! @index
    call: String! @index
    isSigned: Boolean!
    module: String! @index
    success: Boolean!
}

# FungibleTransfer(ChainId, DepositNonce, ResourceId, U256, Vec<u8>)
type FungibleTransferEvent @entity {
    id: ID!

    amount: String! # string representation
    destinationChainId: Int!
    depositNonce: BigInt!
    recipient: String! # hex representation
    resourceId: String! # hex representation
}

# ProposalSucceeded(ChainId, DepositNonce)
type ProposalSucceededEvent @entity {
    id: ID!

    depositNonce: BigInt!
    extrinsic: String
    sourceChainId: Int!
}
